<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BookReserve - Mini Bibliothèque</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
            min-height: 100vh;
            color: #333;
            padding: 20px 0;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            padding: 40px 0;
        }

        .header h1 {
            color: white;
            font-size: 3rem;
            font-weight: 700;
            margin-bottom: 1rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header .subtitle {
            color: rgba(255,255,255,0.9);
            font-size: 1.2rem;
            font-weight: 300;
        }

        .stats-section {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 40px;
            flex-wrap: wrap;
        }

        .stat-card {
            background: rgba(255,255,255,0.15);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            min-width: 150px;
            border: 1px solid rgba(255,255,255,0.2);
        }

        .stat-number {
            font-size: 2.5rem;
            font-weight: bold;
            color: white;
            margin-bottom: 10px;
        }

        .stat-number.available {
            color: #4ade80;
        }

        .stat-number.reserved {
            color: #f59e0b;
        }

        .stat-label {
            color: rgba(255,255,255,0.8);
            font-size: 1rem;
        }

        .books-section {
            margin-bottom: 40px;
        }

        .books-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .book-item {
            background: rgba(255,255,255,0.95);
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            border-left: 5px solid #4f46e5;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .book-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 30px rgba(0,0,0,0.15);
        }

        .book-header {
            display: flex;
            justify-content: between;
            align-items: flex-start;
            margin-bottom: 15px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .book-info {
            flex: 1;
        }

        .book-title {
            font-size: 1.4rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
        }

        .book-isbn {
            color: #666;
            font-size: 0.9rem;
            font-family: 'Courier New', monospace;
            margin-bottom: 10px;
        }

        .book-status {
            display: inline-flex;
            align-items: center;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 500;
            gap: 8px;
        }

        .status-available {
            background: #e8f5e8;
            color: #2d5a2d;
        }

        .status-reserved {
            background: #fff3cd;
            color: #856404;
        }

        .book-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            text-decoration: none;
            font-size: 0.9rem;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

        .btn-reserve {
            background: #4ade80;
            color: white;
        }

        .btn-reserve:hover {
            background: #22c55e;
        }

        .btn-return {
            background: #f59e0b;
            color: white;
        }

        .btn-return:hover {
            background: #d97706;
        }

        .btn-secondary {
            background: #6b7280;
            color: white;
        }

        .btn-secondary:hover {
            background: #4b5563;
        }

        .btn:disabled {
            background: #9ca3af;
            cursor: not-allowed;
            transform: none;
        }

        .btn:disabled:hover {
            transform: none;
            box-shadow: none;
        }

        .reservation-form {
            display: none;
            margin-top: 15px;
            padding: 20px;
            background: rgba(255,255,255,0.1);
            border-radius: 8px;
        }

        .email-input {
            width: 100%;
            padding: 12px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 1rem;
            margin-bottom: 15px;
            transition: border-color 0.3s ease;
        }

        .email-input:focus {
            outline: none;
            border-color: #4f46e5;
        }

        .alert {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: none;
        }

        .alert-success {
            background: #d1fae5;
            color: #065f46;
            border: 1px solid #a7f3d0;
        }

        .alert-error {
            background: #fee2e2;
            color: #991b1b;
            border: 1px solid #fca5a5;
        }

        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        .no-books {
            text-align: center;
            padding: 60px 20px;
            color: rgba(255,255,255,0.8);
        }

        .no-books i {
            font-size: 4rem;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        .api-section {
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 30px;
            border: 1px solid rgba(255,255,255,0.2);
            margin-bottom: 30px;
        }

        .api-title {
            color: white;
            font-size: 1.6rem;
            margin-bottom: 20px;
            text-align: center;
        }

        .endpoints {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .endpoint {
            background: rgba(255,255,255,0.1);
            border-radius: 10px;
            padding: 20px;
            border-left: 4px solid #4ade80;
        }

        .endpoint-method {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 5px;
            font-weight: bold;
            font-size: 0.8rem;
            margin-right: 15px;
        }

        .method-get {
            background: #22c55e;
            color: white;
        }

        .method-post {
            background: #3b82f6;
            color: white;
        }

        .endpoint-url {
            color: rgba(255,255,255,0.9);
            font-family: 'Courier New', monospace;
            font-size: 1rem;
        }

        .endpoint-description {
            color: rgba(255,255,255,0.7);
            margin-top: 8px;
            font-size: 0.9rem;
        }

        .footer {
            text-align: center;
            padding: 30px 0;
            color: rgba(255,255,255,0.6);
        }

        @media (max-width: 768px) {
            .container {
                padding: 0 15px;
            }

            .header h1 {
                font-size: 2.2rem;
            }

            .stats-section {
                flex-direction: column;
                align-items: center;
            }

            .book-header {
                flex-direction: column;
                align-items: flex-start;
            }

            .book-actions {
                width: 100%;
            }

            .btn {
                flex: 1;
                justify-content: center;
                min-width: 120px;
            }
        }

        @media (max-width: 480px) {
            .container {
                padding: 0 10px;
            }

            .header h1 {
                font-size: 1.8rem;
            }

            .book-item {
                padding: 20px;
            }

            .book-actions {
                flex-direction: column;
            }

            .btn {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1><i class="fas fa-book-open"></i> BookReserve</h1>
            <p class="subtitle">Votre mini bibliothèque intelligente</p>
        </div>

        <!-- Statistics -->
        <div class="stats-section">
            <div class="stat-card">
                <div class="stat-number">{{ total_books }}</div>
                <div class="stat-label">Total</div>
            </div>
            <div class="stat-card">
                <div class="stat-number available">{{ available_count }}</div>
                <div class="stat-label">Disponibles</div>
            </div>
            <div class="stat-card">
                <div class="stat-number reserved">{{ reserved_count }}</div>
                <div class="stat-label">Réservés</div>
            </div>
        </div>

        <!-- Alert Container -->
        <div id="alert-container"></div>

        <!-- Books Section -->
        {% if books|length > 0 %}
            <div class="books-section">
                <div class="books-container">
                    {% for book in books %}
                        <div class="book-item" id="book-card-{{ book.id }}">
                            <div class="book-header">
                                <div class="book-info">
                                    <div class="book-title">
                                        <i class="fas fa-book"></i> {{ book.title }}
                                    </div>
                                    <div class="book-isbn">
                                        ISBN: {{ book.isbn }}
                                    </div>
                                    <div class="book-status {% if book.available %}status-available{% else %}status-reserved{% endif %}">
                                        {% if book.available %}
                                            <i class="fas fa-check-circle"></i> Disponible
                                        {% else %}
                                            <i class="fas fa-clock"></i> Réservé
                                        {% endif %}
                                    </div>
                                </div>
                            </div>

                            <div class="book-actions">
                                {% if book.available %}
                                    <button class="btn btn-reserve" onclick="showReservationForm({{ book.id }})">
                                        <i class="fas fa-bookmark"></i> Réserver
                                    </button>
                                {% else %}
                                    <button class="btn btn-return" onclick="returnBook({{ book.id }})">
                                        <i class="fas fa-undo"></i> Restituer
                                    </button>
                                {% endif %}
                            </div>

                            <div id="reservation-form-{{ book.id }}" class="reservation-form">
                                <input type="email" id="email-{{ book.id }}" class="email-input" placeholder="Votre email..." required>
                                <div class="book-actions">
                                    <button class="btn btn-reserve" onclick="reserveBook({{ book.id }})">
                                        <i class="fas fa-check"></i> Confirmer
                                    </button>
                                    <button class="btn btn-secondary" onclick="hideReservationForm({{ book.id }})">
                                        <i class="fas fa-times"></i> Annuler
                                    </button>
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                </div>
            </div>
        {% else %}
            <div class="no-books">
                <i class="fas fa-book-open"></i>
                <h3>Aucun livre disponible pour le moment</h3>
                <p>Ajoutez des livres à votre collection via l'API</p>
            </div>
        {% endif %}

        <!-- API Documentation -->
        <div class="api-section">
            <h2 class="api-title"><i class="fas fa-code"></i> API Endpoints</h2>
            <div class="endpoints">
                <div class="endpoint">
                    <span class="endpoint-method method-get">GET</span>
                    <span class="endpoint-url">/api/books</span>
                    <div class="endpoint-description">
                        Récupère la liste de tous les livres disponibles
                    </div>
                </div>
                <div class="endpoint">
                    <span class="endpoint-method method-post">POST</span>
                    <span class="endpoint-url">/api/books/{id}/reserve</span>
                    <div class="endpoint-description">
                        Réserve un livre spécifique (nécessite un email utilisateur)
                    </div>
                </div>
                <div class="endpoint">
                    <span class="endpoint-method method-post">POST</span>
                    <span class="endpoint-url">/api/books/{id}/return</span>
                    <div class="endpoint-description">
                        Restitue un livre réservé (le rend disponible)
                    </div>
                </div>
            </div>
        </div>

        <!-- Footer -->
        <div class="footer">
            <p><i class="fas fa-heart"></i> Créé avec Symfony {{ constant('Symfony\\Component\\HttpKernel\\Kernel::VERSION') }}</p>
        </div>
    </div>

    <script>
        // Gestion des réservations et restitutions
        function showReservationForm(bookId) {
            document.getElementById(`reservation-form-${bookId}`).style.display = 'block';
            document.getElementById(`email-${bookId}`).focus();
        }

        function hideReservationForm(bookId) {
            document.getElementById(`reservation-form-${bookId}`).style.display = 'none';
            document.getElementById(`email-${bookId}`).value = '';
        }

        function showAlert(message, type = 'success') {
            const alertContainer = document.getElementById('alert-container');
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type}`;
            alertDiv.innerHTML = `
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <span>${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" style="background: none; border: none; font-size: 1.2rem; cursor: pointer;">&times;</button>
                </div>
            `;
            alertContainer.appendChild(alertDiv);
            alertDiv.style.display = 'block';

            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (alertDiv.parentElement) {
                    alertDiv.remove();
                }
            }, 5000);
        }

        async function reserveBook(bookId) {
            const email = document.getElementById(`email-${bookId}`).value;
            
            if (!email || !email.includes('@')) {
                showAlert('Veuillez saisir une adresse email valide', 'error');
                return;
            }

            const bookCard = document.getElementById(`book-card-${bookId}`);
            bookCard.classList.add('loading');

            try {
                const response = await fetch(`/api/books/${bookId}/reserve`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ userEmail: email })
                });

                const data = await response.json();

                if (response.ok) {
                    showAlert(`Livre "${data.reservation.book_title}" réservé avec succès !`, 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    showAlert(data.error || "Erreur lors de la réservation", 'error');
                }
            } catch (error) {
                showAlert("Erreur de connexion", 'error');
            } finally {
                bookCard.classList.remove('loading');
                hideReservationForm(bookId);
            }
        }

        async function returnBook(bookId) {
            if (!confirm('Êtes-vous sûr de vouloir restituer ce livre ?')) {
                return;
            }

            const bookCard = document.getElementById(`book-card-${bookId}`);
            bookCard.classList.add('loading');

            try {
                const response = await fetch(`/api/books/${bookId}/return`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const data = await response.json();

                if (response.ok) {
                    showAlert(`Livre "${data.book.title}" restitué avec succès !`, 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    showAlert(data.error || "Erreur lors de la restitution", 'error');
                }
            } catch (error) {
                showAlert("Erreur de connexion", 'error');
            } finally {
                bookCard.classList.remove('loading');
            }
        }

        // Handle form submission with Enter key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                const activeElement = document.activeElement;
                if (activeElement && activeElement.classList.contains('email-input')) {
                    const bookId = activeElement.id.split('-')[1];
                    reserveBook(bookId);
                }
            }
        });
    </script>
</body>
</html>